apiVersion: v1

kind: Pod

metadata:
  labels:
    app: webapp
    type: dev
  name: dev-webapp

spec:
  containers:
  - image: kodekloud/webapp-delayed-start
    name: dev-webapp
    ports:
      - containerPort: 8080 #The port on the container where the application is listening inside the pod
        protocol: TCP
    livenessProbe:
      httpGet:
        path: /live
        port: 8080
      initialDelaySeconds: 90
      periodSeconds: 1
      timeoutSeconds: 2


#containerPort and targetPort should be the same to ensure that the Service correctly 
#forwards traffic to the port where the container is listening.
#port (Service port) can be different and is used for external access to the Service.
---

apiVersion: v1

kind: Service

metadata:
  labels:
    app: dev
  name: dev-svc

spec:
  ports:
  - port: 80 # Service port exposed to clients #mandatory to mention
    protocol: TCP
    targetPort: 8080 #Port on the Pod where traffic is forwarded # if not mentioned, = port
    nodePort: 30080 #30000-32767
  selector:
    app: dev
  type: NodePort


---

apiVersion: v1

kind: Pod

metadata:
  labels:
    app: webapp
    type: prod
  name: prod-webapp

spec:
  containers:
  - image: kodekloud/webapp-delayed-start
    name: prod-webapp
    ports:
      - containerPort: 8080
        protocol: TCP
#   env:
#   - name: APP_START_DELAY
#     value: "80" # "" mandatory
    readinessProbe: #Internal Server Error due to freeze, limit of readinessProbe
      httpGet: # this happens due to fail in coding of the application.
        path: /ready # solution: livenessProbe, we will add it in all our pods
        port: 8080
# The server encountered an internal error and was unable to complete your request.
# Either the server is overloaded or there is an error in the application.
    livenessProbe:
      httpGet:
        path: /live
        port: 8080
      initialDelaySeconds: 90
      periodSeconds: 10
      timeoutSeconds: 2



apiVersion: v1

kind: Service

metadata:
  name: prod-svc
  labels:
    app: abc # Labels the Service object itself. These are for organizational or querying purposes.
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
    nodePort: 30090
  selector: #Selects which Pods the Service will route traffic to, based on the labels applied to those Pods.
    app: webapp
  type: NodePort

#spec.selector: This field is essential for Service functionality because
#it defines which Pods the Service will forward traffic to. It relies on the labels attached to the Pods. 
#The spec.selector field looks for Pods that match the specified labels,
#and those Pods are the ones that will receive traffic from the Service.

