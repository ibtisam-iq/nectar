apiVersion: v1
kind: Pod
metadata:                       # labels, annotations, name, namespace, uid, resourceVersion, generation, creationTimestamp,  deletionTimestamp, deletionGracePeriodSeconds,
  labels:                       # it's not a list (no -)
    run: abc                    # if not mentined, if picks  the name of Pod 
  annotations:
    description: A frontend pod
    owner: ibtisam
  name: abc                     # ALWAYS MANDATORY FOR A POD YAML FILE
  namespace: default            # NAMESPACE is mentioned only under the metadata (& of resource's metadata).
spec:
  containers:
  - image: nginx
    name: abc
    env:
    - name: APP_NAME                              # in case of Docker -e APP_NAME=Blue - Marketing Application
      value: Blue - Marketing Application
    - name: BG_COLOR                              # in case of Docker -e BG_COLOR=blue
      value: blue
    ports:
    - containerPort: 80
      protocol: TCP    
    resources:
      limits:             # max
        cpu: "1.5"
        memory: 3Gi
      requests:           # actual required, always < limit
        cpu: "1"          # default cpu = 0.5
        memory: 1.5Gi     # default memory = 256 Mi   
    command: ['sh', '-c', 'echo "this is ibtisam"; while true; do sleep 5; done']
    command: ["sleep"]    # just like Docker's ENTRYPOINT # or ["sleep", "10"] "10"  is an argument and mentioned in the command array.
    args: ["10"]          # just like Docker's CMD #  if not mentioned, it will use the command
    volumeMounts:
    - name: shared-volume
      mountPath: /pod-data
  volumes:
  - name: shared-volume
    emptyDir: {}
  tolerations:          # kubectl taint nodes <node-name> key=value:effect dedicated=special:NoSchedule
  - key: "dedicated"
    operator: "Equal"
    value: "special"
    effect: "NoSchedule"
  nodeSelector:         
   size: large          # kubectl label nodes <node-name> key=value    size:large
  restartPolicy: Always
  hostNetwork: true
  dnsPolicy: {}
status: {}

# command & args
# security Context
# ConfigMap & Secret
---
# plain key value
    env:                    # key="MY_COLOR" value="pink"
    - name: MY_COLOR
      value: "pink"
# ConfigMap
    env:
    - name: MY_COLOR
      valueFrom:
        configMapKeyRef:

    envFrom:                
    - configMapRef:
        name: test-cm       # name of configmap
# Secrets
    env:
    - name: MY_COLOR
      valueFrom:
        secretKeyRef:

    envFrom:
    - secretRef:
        name: db-secret     # name of secret