#1  installation
which git
git --version
git -v


#2  configuration

there are 3 config files, --global --system --local
--global    <run from anywhere>
--system    <anywhere, but requires root permission>
--local     <for that directory>

git config --global user.name "ibtisam"             
git config --global user.email "abc@gmail.com"
git config --global core.editor "vim"
git config --global alias.st status         #to set alias			#or "status"
git config --global --unset alias.st        #to unset alias
git config --global --unset user.name 
git config --global --list                  #to check all under --global
git config --global --edit


git config pull.rebase false				# to set pull to fetch and merge # To always merge (default behavior)
git config pull.rebase true					# to set pull to rebase
git config pull.ff only						# to set pull to fast forward only


ibtisam@mint-dell:~$ cat .gitconfig         # --global

ibtisam@mint-dell:~$ cat /etc/gitconfig     # --system

ibtisam@mint-dell:~/git$ cat .git/config    # --local   #
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = https://github.com/mibtisam-iq/test-1.git
	fetch = +refs/heads/*:refs/remotes/origin/*

ibtisam@mint-dell:~$ git config --list         #outside the directory
user.name=ibtisam
user.email=m.ibtisam.iq@gmail.com
core.editor=vim

ibtisam@mint-dell:~/git$ git config --list      #inside the directory
user.name=ibtisam
user.email=m.ibtisam.iq@gmail.com
core.editor=--help
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=https://github.com/mibtisam-iq/test-1.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*

#3 Basic Commands

git init                                        #to start tracking
git status
git add <filename> or git add .                 #to add into stagged area
git diff --cached								#run it before commit to see what you are about to commit.
git commit -m "msg"				--message
git commit -m "msg" --dry-run 					#dry run

Case 1 Undo Changes to Files 
git checkout <file>		Deprecated	OR			#you just stagged a file (not commited yet), and add some text (not stagged yet), revert some text added. #If you've made changes to a file but haven't staged or committed them, and you want to discard those changes.
git restore <file>         						#recover the deleted staged or commited file
git restore <file>                      		#Similar to git checkout <file>, reverts uncommitted changes in the specified file to the state of the latest commit.
git restore --worktree <file> 					#Similar to git checkout <file>, but explicitly applies to files in the working directory.

Case 2 Undo Staged Changes
git reset <filename> or git reset .     OR      #to remove from stagged area
git restore --staged <file>                     #to unstage a file

Case 3 Undo Commits
git reset --soft <commit> 						#reset the commit, but keep the changes in the stagged area
git reset --mixed <commit>						#reset the commit, but remove the changes from the stagged area, but keep the changes in the working directory
git reset --hard <commit>						#reset the commit, and remove the changes from the stagged and the working directory
git revert <commit>								#undo the commit, but keep the changes in the stagged area # A new commit is created that undoes the changes made in the specified commit.

Case 4 Clean Untracked Files
git clean -n 									#dry run, shows a preview of untracked files and directories that would be removed by git clean -f
git clean -f									#deletes untracked files from the working directory. #Note: This will delete files that are not tracked by Git, but it will not delete files that are tracked by Git, even if they are not in the current commit. 
git clean -f -d									#if you want to delete files that are tracked by Git, you can use git clean -fd.



git log                                         #displays a list of all commits, including the commit ID, author, date, and message in reverse chronological order.
git log --grep "woman"		OR					# search from the commit messages only
git log --grep="woman"
git log --since="2024-01-01"
git log --until="2024-01-01"
git log --author="ibtisam"
git log --no-merge



git log -2										#last 2 commits
git log -p -2									#last 2 commits with diff
git log --stat									#summary of changes
git log --oneline 								#one line per commit
git log --pretty=oneline
git log --pretty=format:"%h - %an, %ar %s"		#h for tag id, an for author, ar for times ago, s for commit message
git log -S <function_name>


git show <comment_ID>:filename                  #to see that (previous) version
git diff <commit1> <commit2>                    #displays the differences between the specified commits.
git diff                                        #shows the differences between your working directory and the staging area.
git diff --cached

git checkout <commit ID> -- *					#to check the live changes
git checkout main -- *							#to get back 

git branch                                      # to check all local branches # to check on which branch you are working
git branch -a        --all                      #to check all branches
git branch -r 		 --remote					#to check remote branches
git branch <2nd>                                #new branch is created
git branch -m <master> <main>	--move			#Renames the branch, but fails if the new branch name already exists
git branch -M master main		--move --force	#Renames the branch and forces the rename, overwriting the branch if the new name already exists
git branch -c <master> <main>	--copy			#Creates a new branch and copies the history
git branch -d <2nd>             --delete        #deleted after merging at local # make sure you checkout to any other branch to delete <2nd> # make sure to delete remote branch as well
git checkout <branch_to_switch> 				#to switch to another branch
git checkout -f <branch_to_switch>	--force		#to switch to another branch forcefully # Forces a checkout, discarding any uncommitted changes in the working directory. # When you need to switch branches but have uncommitted changes youâ€™re willing to lose.
git checkout -b feature/new-feature 			#to create a new branch and switch to it simultaneouly. # The new branch feature/new-feature will be based on your current branch.
git checkout -b feature/new-feature main		#The new branch feature/new-feature will be based on main, regardless of which branch you are currently on.
git switch -c feature/new-feature main	--create #The new branch feature/new-feature will be based on main, regardless of which branch


git merge <branch name want to merge>           #switch to main branch first & then merge
git merge --no-commit <branch name> 			#merge but do not commit
git rebase <branch name>						#switch to main branch first & then rebase the branch
git merge origin/main							#merge changes from the remote main branch into your current branch.


#Adding a remote repository 
git remote add origin <HTTPS/SSH>         		#local repository is now connected to the remote repository on GitHub.
#<remote-name>: A short name you want to use for the remote repository (e.g., origin).
git remote -v                                   #displays the URLs of your remote repositories
git remote remove origin                        #remote repository named origin is removed from your local repository.
git push origin --delete one					#delete the remote "one" branch

git fetch origin main
git pull origin main --rebase					#This flag ensures that your local changes will be applied on top of the changes pulled from the remote branch.
git push <remote-name> <branch-name>            #upload # git push origin main # Use -u when you're pushing a branch for the first time and want to make future git push/git pull commands more convenient.
git pull <remote-name> <branch-name>            #download #does not require authentication 
git push origin one								#pushed, even there was no "one" branch in github repo. Created & pushed.
git push origin main --tags


git clone <remote-url>							#by default, it picks "main" branch only
git clone -b <branch-name> --single-branch <remote-url>


git stash
git stash list
git stash apply
git stash apply <>
git stash drop <>
git stash clear 

git tag
git tag -a "tag name" -m "tag message" <commit ID>
git tag -d <tag name>							#delete a tag from the local repository
git show <tag name>
git push origin --delete <tag name>				#delete a tag from the remote repository



